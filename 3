import numpy as np
import matplotlib.pyplot as plt
from queue import PriorityQueue

# -------------------------------
# PART 1: Contour Plot
# -------------------------------

def visualize_contour():
    x = np.linspace(-5, 5, 100)
    y = np.linspace(-5, 5, 100)
    X, Y = np.meshgrid(x, y)

    # A sample 2D function (like from a 3D n-dimensional space)
    Z = np.sin(X) * np.cos(Y)

    plt.contourf(X, Y, Z, levels=20, cmap='viridis')
    plt.colorbar()
    plt.title("Contour Plot of sin(x) * cos(y)")
    plt.xlabel("X-axis")
    plt.ylabel("Y-axis")
    plt.grid(True)
    plt.show()

# -------------------------------
# PART 2: A* Algorithm on 2D Grid
# -------------------------------

def heuristic(a, b):
    # Manhattan distance
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(start, goal, grid):
    rows, cols = len(grid), len(grid[0])
    open_set = PriorityQueue()
    open_set.put((0, start))

    came_from = {}
    g_score = {start: 0}

    while not open_set.empty():
        _, current = open_set.get()

        if current == goal:
            # Reconstruct path
            path = []
            while current in came_from:
                path.append(current)
                current = came_from[current]
            path.append(start)
            path.reverse()
            return path

        neighbors = [(0,1), (1,0), (0,-1), (-1,0)]  # 4 directions
        for dx, dy in neighbors:
            neighbor = (current[0] + dx, current[1] + dy)

            if 0 <= neighbor[0] < rows and 0 <= neighbor[1] < cols and grid[neighbor[0]][neighbor[1]] == 0:
                tentative_g = g_score[current] + 1
                if neighbor not in g_score or tentative_g < g_score[neighbor]:
                    g_score[neighbor] = tentative_g
                    f_score = tentative_g + heuristic(neighbor, goal)
                    open_set.put((f_score, neighbor))
                    came_from[neighbor] = current

    return None  # No path found

# -------------------------------
# MAIN PROGRAM
# -------------------------------

if __name__ == "__main__":
    print(" Contour Plot from a 2D slice of n-D data...")
    visualize_contour()

    print("\n A* Pathfinding on Grid:")

    grid = [
        [0, 0, 0, 0, 0],
        [0, 1, 1, 1, 0],
        [0, 0, 0, 1, 0],
        [1, 1, 0, 0, 0],
        [0, 0, 0, 1, 0]
    ]

    start = (0, 0)
    goal = (4, 4)
    path = a_star(start, goal, grid)

    if path:
        print(" Path found:")
        print(path)
    else:
        print(" No path found.")
