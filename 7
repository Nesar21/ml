import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import fetch_openml
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load dataset
df = fetch_openml("glass", version=1, as_frame=True).frame
X, y = df.drop("Type", axis=1), df["Type"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train & evaluate for both metrics
results = {}
for metric in ["euclidean", "manhattan"]:
    model = KNeighborsClassifier(n_neighbors=3, metric=metric).fit(X_train, y_train)
    results[metric] = accuracy_score(y_test, model.predict(X_test))

# Print results
for m, acc in results.items():
    print(f"{m.capitalize()} Accuracy: {round(acc*100,2)}%")

# Plot comparison
plt.bar(results.keys(), results.values(), color=["blue", "orange"])
plt.title("KNN Accuracy Comparison (k=3)")
plt.ylabel("Accuracy")
plt.ylim(0, 1)
plt.show()


-------offline-----------


import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load dataset locally (make sure glass.csv is in the same folder)
df = pd.read_csv("glass.csv")

# Split features & labels (assuming last column = Type)
X, y = df.drop("Type", axis=1), df["Type"]

# Train-test split (70% train, 30% test)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train & evaluate for both metrics
results = {}
for metric in ["euclidean", "manhattan"]:
    model = KNeighborsClassifier(n_neighbors=3, metric=metric).fit(X_train, y_train)
    results[metric] = accuracy_score(y_test, model.predict(X_test))

# Print results
for m, acc in results.items():
    print(f"{m.capitalize()} Accuracy: {round(acc*100,2)}%")

# Plot comparison
plt.bar(results.keys(), results.values(), color=["blue", "orange"])
plt.title("KNN Accuracy Comparison (k=3)")
plt.ylabel("Accuracy")
plt.ylim(0, 1)
plt.show()
