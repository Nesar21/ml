import numpy as np

class Perceptron:
    def __init__(self, input_size, lr=0.1, epochs=10):
        self.weights = np.zeros(input_size + 1)  # +1 for bias
        self.lr = lr
        self.epochs = epochs

    def activation(self, x):
        return 1 if x >= 0 else 0

    def predict(self, x):
        z = self.weights.T.dot(np.insert(x, 0, 1))  # Add bias term
        return self.activation(z)

    def train(self, X, y):
        for _ in range(self.epochs):
            for xi, target in zip(X, y):
                z = np.insert(xi, 0, 1)  # Add bias
                output = self.predict(xi)
                error = target - output
                self.weights += self.lr * error * z

# Input and output for AND and OR
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])

# --- AND Gate ---
print("Training Perceptron for AND gate")
y_and = np.array([0, 0, 0, 1])
perceptron_and = Perceptron(input_size=2)
perceptron_and.train(X, y_and)

print("AND Gate Results:")
for x in X:
    print(f"Input: {x}, Output: {perceptron_and.predict(x)}")

# --- OR Gate ---
print("\nTraining Perceptron for OR gate")
y_or = np.array([0, 1, 1, 1])
perceptron_or = Perceptron(input_size=2)
perceptron_or.train(X, y_or)

print("OR Gate Results:")
for x in X:
    print(f"Input: {x}, Output: {perceptron_or.predict(x)}")
